import {
  ALL_EVENTS,
  ALL_EVENTS_ABI,
  AbiError,
  BaseWeb3Error,
  BlockTags,
  ChainIdMismatchError,
  ChainMismatchError,
  CommonOrChainAndHardforkError,
  ConfigChainMismatchError,
  ConfigHardforkMismatchError,
  ConnectionCloseError,
  ConnectionError,
  ConnectionNotOpenError,
  ConnectionTimeoutError,
  Contract,
  ContractCodeNotStoredError,
  ContractEventDoesNotExistError,
  ContractExecutionError,
  ContractInstantiationError,
  ContractMissingABIError,
  ContractMissingDeployDataError,
  ContractNoAddressDefinedError,
  ContractNoFromAddressDefinedError,
  ContractOnceRequiresCallbackError,
  ContractReservedEventError,
  ContractTransactionDataAndInputError,
  DEFAULT_RETURN_FORMAT,
  EIP1193ProviderRpcError,
  ENSCheckInterfaceSupportError,
  ENSNetworkNotSyncedError,
  ENSUnsupportedNetworkError,
  ERR_ABI_ENCODING,
  ERR_CONN,
  ERR_CONN_CLOSE,
  ERR_CONN_INVALID,
  ERR_CONN_MAX_ATTEMPTS,
  ERR_CONN_NOT_OPEN,
  ERR_CONN_PENDING_REQUESTS,
  ERR_CONN_TIMEOUT,
  ERR_CONTRACT,
  ERR_CONTRACT_ABI_MISSING,
  ERR_CONTRACT_EVENT_NOT_EXISTS,
  ERR_CONTRACT_EXECUTION_REVERTED,
  ERR_CONTRACT_INSTANTIATION,
  ERR_CONTRACT_MISSING_ADDRESS,
  ERR_CONTRACT_MISSING_DEPLOY_DATA,
  ERR_CONTRACT_MISSING_FROM_ADDRESS,
  ERR_CONTRACT_REQUIRED_CALLBACK,
  ERR_CONTRACT_RESERVED_EVENT,
  ERR_CONTRACT_RESOLVER_MISSING,
  ERR_CONTRACT_TX_DATA_AND_INPUT,
  ERR_CORE_CHAIN_MISMATCH,
  ERR_CORE_HARDFORK_MISMATCH,
  ERR_ENS_CHECK_INTERFACE_SUPPORT,
  ERR_ENS_NETWORK_NOT_SYNCED,
  ERR_ENS_UNSUPPORTED_NETWORK,
  ERR_EXISTING_PLUGIN_NAMESPACE,
  ERR_FORMATTERS,
  ERR_INVALID_ADDRESS,
  ERR_INVALID_BLOCK,
  ERR_INVALID_BOOLEAN,
  ERR_INVALID_BYTES,
  ERR_INVALID_CLIENT,
  ERR_INVALID_HEX,
  ERR_INVALID_KEYSTORE,
  ERR_INVALID_LARGE_VALUE,
  ERR_INVALID_METHOD_PARAMS,
  ERR_INVALID_NIBBLE_WIDTH,
  ERR_INVALID_NUMBER,
  ERR_INVALID_PASSWORD,
  ERR_INVALID_PRIVATE_KEY,
  ERR_INVALID_PROVIDER,
  ERR_INVALID_RESPONSE,
  ERR_INVALID_SIGNATURE,
  ERR_INVALID_SIZE,
  ERR_INVALID_STRING,
  ERR_INVALID_TYPE,
  ERR_INVALID_TYPE_ABI,
  ERR_INVALID_UNIT,
  ERR_INVALID_UNSIGNED_INTEGER,
  ERR_IV_LENGTH,
  ERR_KEY_DERIVATION_FAIL,
  ERR_KEY_VERSION_UNSUPPORTED,
  ERR_METHOD_NOT_IMPLEMENTED,
  ERR_OPERATION_ABORT,
  ERR_OPERATION_TIMEOUT,
  ERR_PARAM,
  ERR_PBKDF2_ITERATIONS,
  ERR_PRIVATE_KEY_LENGTH,
  ERR_PROVIDER,
  ERR_RAW_TX_UNDEFINED,
  ERR_REQ_ALREADY_SENT,
  ERR_RESPONSE,
  ERR_RPC_INTERNAL_ERROR,
  ERR_RPC_INVALID_INPUT,
  ERR_RPC_INVALID_JSON,
  ERR_RPC_INVALID_METHOD,
  ERR_RPC_INVALID_PARAMS,
  ERR_RPC_INVALID_REQUEST,
  ERR_RPC_LIMIT_EXCEEDED,
  ERR_RPC_MISSING_RESOURCE,
  ERR_RPC_NOT_SUPPORTED,
  ERR_RPC_TRANSACTION_REJECTED,
  ERR_RPC_UNAVAILABLE_RESOURCE,
  ERR_RPC_UNSUPPORTED_METHOD,
  ERR_SCHEMA_FORMAT,
  ERR_SIGNATURE_FAILED,
  ERR_SUBSCRIPTION,
  ERR_TX,
  ERR_TX_BLOCK_TIMEOUT,
  ERR_TX_CHAIN_ID_MISMATCH,
  ERR_TX_CHAIN_MISMATCH,
  ERR_TX_CONTRACT_NOT_STORED,
  ERR_TX_DATA_AND_INPUT,
  ERR_TX_GAS_MISMATCH,
  ERR_TX_GAS_MISMATCH_INNER_ERROR,
  ERR_TX_HARDFORK_MISMATCH,
  ERR_TX_INVALID_CALL,
  ERR_TX_INVALID_CHAIN_INFO,
  ERR_TX_INVALID_FEE_MARKET_GAS,
  ERR_TX_INVALID_FEE_MARKET_GAS_PRICE,
  ERR_TX_INVALID_LEGACY_FEE_MARKET,
  ERR_TX_INVALID_LEGACY_GAS,
  ERR_TX_INVALID_NONCE_OR_CHAIN_ID,
  ERR_TX_INVALID_OBJECT,
  ERR_TX_INVALID_PROPERTIES_FOR_TYPE,
  ERR_TX_INVALID_RECEIVER,
  ERR_TX_INVALID_SENDER,
  ERR_TX_LOCAL_WALLET_NOT_AVAILABLE,
  ERR_TX_MISSING_CHAIN_INFO,
  ERR_TX_MISSING_CUSTOM_CHAIN,
  ERR_TX_MISSING_CUSTOM_CHAIN_ID,
  ERR_TX_MISSING_GAS,
  ERR_TX_MISSING_GAS_INNER_ERROR,
  ERR_TX_NOT_FOUND,
  ERR_TX_NO_CONTRACT_ADDRESS,
  ERR_TX_OUT_OF_GAS,
  ERR_TX_POLLING_TIMEOUT,
  ERR_TX_RECEIPT_MISSING_BLOCK_NUMBER,
  ERR_TX_RECEIPT_MISSING_OR_BLOCKHASH_NULL,
  ERR_TX_REVERT_INSTRUCTION,
  ERR_TX_REVERT_TRANSACTION,
  ERR_TX_REVERT_TRANSACTION_CUSTOM_ERROR,
  ERR_TX_REVERT_WITHOUT_REASON,
  ERR_TX_SEND_TIMEOUT,
  ERR_TX_SIGNING,
  ERR_TX_UNABLE_TO_POPULATE_NONCE,
  ERR_TX_UNSUPPORTED_EIP_1559,
  ERR_TX_UNSUPPORTED_TYPE,
  ERR_UNSUPPORTED_KDF,
  ERR_VALIDATION,
  ERR_WS_PROVIDER,
  ETH_DATA_FORMAT,
  Eip1193Provider,
  Eip1559GasPriceError,
  Eip1559NotSupportedError,
  Eip838ExecutionError,
  ExistingPluginNamespaceError,
  FMT_BYTES,
  FMT_NUMBER,
  FormatterError,
  GENESIS_BLOCK_NUMBER,
  HardforkMismatchError,
  HardforksOrdered,
  HexProcessingError,
  HttpProvider,
  IVLengthError,
  Iban,
  InternalError,
  InvalidAddressError,
  InvalidBlockError,
  InvalidBooleanError,
  InvalidBytesError,
  InvalidClientError,
  InvalidConnectionError,
  InvalidGasOrGasPrice,
  InvalidInputError,
  InvalidKdfError,
  InvalidLargeValueError,
  InvalidMaxPriorityFeePerGasOrMaxFeePerGas,
  InvalidMethodParamsError,
  InvalidNonceOrChainIdError,
  InvalidNumberError,
  InvalidNumberOfParamsError,
  InvalidParamsError,
  InvalidPasswordError,
  InvalidPrivateKeyError,
  InvalidPropertiesForTransactionTypeError,
  InvalidProviderError,
  InvalidRequestError,
  InvalidResponseError,
  InvalidSignatureError,
  InvalidSizeError,
  InvalidStringError,
  InvalidTransactionCall,
  InvalidTransactionObjectError,
  InvalidTransactionWithReceiver,
  InvalidTransactionWithSender,
  InvalidTypeAbiInputError,
  InvalidTypeError,
  InvalidUnitError,
  InvalidUnsignedIntegerError,
  InvalidValueError,
  JSONRPC_ERR_CHAIN_DISCONNECTED,
  JSONRPC_ERR_DISCONNECTED,
  JSONRPC_ERR_REJECTED_REQUEST,
  JSONRPC_ERR_UNAUTHORIZED,
  JSONRPC_ERR_UNSUPPORTED_METHOD,
  KeyDerivationError,
  KeyStoreVersionError,
  LimitExceededError,
  LocalWalletNotAvailableError,
  LogsSubscription,
  MaxAttemptsReachedOnReconnectingError,
  MethodNotFoundError,
  MethodNotImplementedError,
  MethodNotSupported,
  MissingChainOrHardforkError,
  MissingCustomChainError,
  MissingCustomChainIdError,
  MissingGasError,
  MissingGasInnerError,
  NUMBER_DATA_FORMAT,
  Net,
  NewHeadsSubscription,
  NewPendingTransactionsSubscription,
  NibbleWidthError,
  NoContractAddressFoundError,
  OperationAbortError,
  OperationTimeoutError,
  PBKDF2IterationsError,
  ParseError,
  PendingRequestsOnReconnectingError,
  PrivateKeyLengthError,
  ProviderError,
  RequestAlreadySentError,
  ResolverMethodMissingError,
  ResourceUnavailableError,
  ResourcesNotFoundError,
  ResponseError,
  RevertInstructionError,
  RpcError,
  RpcErrorMessages,
  SchemaFormatError,
  SignatureError,
  SignatureObjectSchema,
  SocketProvider,
  SubscriptionError,
  SyncingSubscription,
  TransactionBlockTimeoutError,
  TransactionDataAndInputError,
  TransactionError,
  TransactionGasMismatchError,
  TransactionGasMismatchInnerError,
  TransactionMissingReceiptOrBlockHashError,
  TransactionNotFound,
  TransactionOutOfGasError,
  TransactionPollingTimeoutError,
  TransactionReceiptMissingBlockNumberError,
  TransactionRejectedError,
  TransactionRevertInstructionError,
  TransactionRevertWithCustomError,
  TransactionRevertedWithoutReasonError,
  TransactionSendTimeoutError,
  TransactionSigningError,
  TypedArray,
  UnableToPopulateNonceError,
  UndefinedRawTransactionError,
  UnsupportedFeeMarketError,
  UnsupportedTransactionTypeError,
  VersionNotSupportedError,
  Wallet,
  Web3BaseProvider,
  Web3BaseWallet,
  Web3Context,
  Web3ContractError,
  Web3Eth,
  Web3EthPluginBase,
  Web3PluginBase,
  Web3Validator,
  Web3WSProviderError,
  WebSocketProvider,
  accessListItemSchema,
  accessListResultSchema,
  accessListSchema,
  accountSchema,
  blockHeaderSchema,
  blockSchema,
  call,
  chainSchema,
  create,
  createAccessList,
  customChainSchema,
  decodeEventABI,
  decodeLog,
  decodeParameter,
  decodeParameters,
  decrypt,
  detectTransactionType,
  encodeEventSignature,
  encodeFunctionCall,
  encodeFunctionSignature,
  encodeParameter,
  encodeParameters,
  encrypt,
  esm_default,
  esm_exports,
  esm_exports10,
  esm_exports11,
  esm_exports12,
  esm_exports13,
  esm_exports2,
  esm_exports3,
  esm_exports4,
  esm_exports5,
  esm_exports6,
  esm_exports7,
  esm_exports8,
  esm_exports9,
  estimateGas,
  feeHistorySchema,
  format,
  formatTransaction,
  genericRpcErrorMessageTemplate,
  getBalance,
  getBlock,
  getBlockNumber,
  getBlockTransactionCount,
  getBlockUncleCount,
  getChainId,
  getCode,
  getCoinbase,
  getFeeHistory,
  getGasPrice,
  getHashRate,
  getId,
  getLogs,
  getPendingTransactions,
  getProof,
  getProtocolVersion,
  getStorageAt,
  getTransaction,
  getTransactionCount,
  getTransactionFromBlock,
  getTransactionReceipt,
  getUncle,
  hardforkSchema,
  hashMessage,
  isAccessList,
  isAccessListEntry,
  isBaseTransaction,
  isContractInitOptions,
  isDataFormat,
  isHexStrict,
  isMining,
  isNullish,
  isSupportedProvider,
  isSyncing,
  isTransaction1559Unsigned,
  isTransaction2930Unsigned,
  isTransactionCall,
  isTransactionLegacyUnsigned,
  isTransactionWithSender,
  logSchema,
  parseAndValidatePrivateKey,
  personal_rpc_methods_exports,
  prepareTransactionForSigning,
  privateKeyToAccount,
  privateKeyToAddress,
  privateKeyToPublicKey,
  recover,
  recoverTransaction,
  registeredSubscriptions,
  rpcErrorsMap,
  sendSignedTransaction,
  sendTransaction,
  sha3,
  sha3Raw,
  sign,
  sign2,
  signTransaction,
  signTransaction2,
  signTypedData,
  storageProofSchema,
  syncSchema,
  toChecksumAddress,
  transactionBuilder,
  transactionInfoSchema,
  transactionReceiptSchema,
  transactionSchema,
  utf8ToHex,
  validateBaseChain,
  validateChainInfo,
  validateCustomChainInfo,
  validateFeeMarketGas,
  validateGas,
  validateHardfork,
  validateLegacyGas,
  validateTransactionCall,
  validateTransactionForSigning,
  validateTransactionWithSender,
  validator,
  withdrawalsSchema
} from "./chunk-WNIHVIVP.js";
import "./chunk-BRIQEVGF.js";
import {
  __export
} from "./chunk-ANIWD3T6.js";

// node_modules/web3-eth-ens/lib/esm/index.js
var esm_exports14 = {};
__export(esm_exports14, {
  ENS: () => ENS,
  registryAddresses: () => registryAddresses
});

// node_modules/web3-eth-ens/lib/esm/config.js
var interfaceIds = {
  addr: "0x3b3b57de",
  name: "0x691f3431",
  abi: "0x2203ab56",
  pubkey: "0xc8690233",
  text: "0x59d1d43c",
  contenthash: "0xbc1c58d1"
};
var methodsInInterface = {
  setAddr: "addr",
  addr: "addr",
  setPubkey: "pubkey",
  pubkey: "pubkey",
  setContenthash: "contenthash",
  contenthash: "contenthash"
};
var registryAddresses = {
  main: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
  goerli: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e"
};
var networkIds = {
  "0x1": "main",
  "0x5": "goerli"
};

// node_modules/web3-eth-ens/lib/esm/abi/ens/ENSRegistry.js
var ENSRegistryAbi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "node",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "label",
        type: "bytes32"
      },
      {
        indexed: false,
        internalType: "address",
        name: "owner",
        type: "address"
      }
    ],
    name: "NewOwner",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "node",
        type: "bytes32"
      },
      {
        indexed: false,
        internalType: "address",
        name: "resolver",
        type: "address"
      }
    ],
    name: "NewResolver",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "node",
        type: "bytes32"
      },
      {
        indexed: false,
        internalType: "address",
        name: "owner",
        type: "address"
      }
    ],
    name: "Transfer",
    type: "event"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address"
      },
      {
        internalType: "address",
        name: "operator",
        type: "address"
      }
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "node",
        type: "bytes32"
      }
    ],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "node",
        type: "bytes32"
      }
    ],
    name: "recordExists",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "node",
        type: "bytes32"
      }
    ],
    name: "resolver",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "node",
        type: "bytes32"
      }
    ],
    name: "ttl",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];

// node_modules/web3-eth-ens/lib/esm/abi/ens/PublicResolver.js
var PublicResolverAbi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "node",
        type: "bytes32"
      },
      {
        indexed: false,
        internalType: "address",
        name: "a",
        type: "address"
      }
    ],
    name: "AddrChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "node",
        type: "bytes32"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "coinType",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "newAddress",
        type: "bytes"
      }
    ],
    name: "AddressChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address"
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool"
      }
    ],
    name: "ApprovalForAll",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "node",
        type: "bytes32"
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "hash",
        type: "bytes"
      }
    ],
    name: "ContenthashChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "node",
        type: "bytes32"
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "name",
        type: "bytes"
      },
      {
        indexed: false,
        internalType: "uint16",
        name: "resource",
        type: "uint16"
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "record",
        type: "bytes"
      }
    ],
    name: "DNSRecordChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "node",
        type: "bytes32"
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "name",
        type: "bytes"
      },
      {
        indexed: false,
        internalType: "uint16",
        name: "resource",
        type: "uint16"
      }
    ],
    name: "DNSRecordDeleted",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "node",
        type: "bytes32"
      }
    ],
    name: "DNSZoneCleared",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "node",
        type: "bytes32"
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "lastzonehash",
        type: "bytes"
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "zonehash",
        type: "bytes"
      }
    ],
    name: "DNSZonehashChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "node",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "bytes4",
        name: "interfaceID",
        type: "bytes4"
      },
      {
        indexed: false,
        internalType: "address",
        name: "implementer",
        type: "address"
      }
    ],
    name: "InterfaceChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "node",
        type: "bytes32"
      },
      {
        indexed: false,
        internalType: "string",
        name: "name",
        type: "string"
      }
    ],
    name: "NameChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "node",
        type: "bytes32"
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "x",
        type: "bytes32"
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "y",
        type: "bytes32"
      }
    ],
    name: "PubkeyChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "node",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "string",
        name: "indexedKey",
        type: "string"
      },
      {
        indexed: false,
        internalType: "string",
        name: "key",
        type: "string"
      }
    ],
    name: "TextChanged",
    type: "event"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "node",
        type: "bytes32"
      },
      {
        internalType: "uint256",
        name: "contentTypes",
        type: "uint256"
      }
    ],
    name: "ABI",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "node",
        type: "bytes32"
      }
    ],
    name: "addr",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "node",
        type: "bytes32"
      },
      {
        internalType: "uint256",
        name: "coinType",
        type: "uint256"
      }
    ],
    name: "addr",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "node",
        type: "bytes32"
      }
    ],
    name: "contenthash",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "node",
        type: "bytes32"
      },
      {
        internalType: "bytes32",
        name: "name",
        type: "bytes32"
      },
      {
        internalType: "uint16",
        name: "resource",
        type: "uint16"
      }
    ],
    name: "dnsRecord",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "node",
        type: "bytes32"
      },
      {
        internalType: "bytes32",
        name: "name",
        type: "bytes32"
      }
    ],
    name: "hasDNSRecords",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "node",
        type: "bytes32"
      },
      {
        internalType: "bytes4",
        name: "interfaceID",
        type: "bytes4"
      }
    ],
    name: "interfaceImplementer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address"
      },
      {
        internalType: "address",
        name: "operator",
        type: "address"
      }
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "node",
        type: "bytes32"
      }
    ],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "node",
        type: "bytes32"
      }
    ],
    name: "pubkey",
    outputs: [
      {
        internalType: "bytes32",
        name: "x",
        type: "bytes32"
      },
      {
        internalType: "bytes32",
        name: "y",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceID",
        type: "bytes4"
      }
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "node",
        type: "bytes32"
      },
      {
        internalType: "string",
        name: "key",
        type: "string"
      }
    ],
    name: "text",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "node",
        type: "bytes32"
      }
    ],
    name: "zonehash",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];

// node_modules/@adraffy/ens-normalize/dist/index.mjs
var COMPRESSED$1 = "";
var FENCED = /* @__PURE__ */ new Map([[8217, "apostrophe"], [8260, "fraction slash"], [12539, "middle dot"]]);
var NSM_MAX = 4;
function decode_arithmetic(bytes) {
  let pos = 0;
  function u16() {
    return bytes[pos++] << 8 | bytes[pos++];
  }
  let symbol_count = u16();
  let total = 1;
  let acc = [0, 1];
  for (let i = 1; i < symbol_count; i++) {
    acc.push(total += u16());
  }
  let skip = u16();
  let pos_payload = pos;
  pos += skip;
  let read_width = 0;
  let read_buffer = 0;
  function read_bit() {
    if (read_width == 0) {
      read_buffer = read_buffer << 8 | bytes[pos++];
      read_width = 8;
    }
    return read_buffer >> --read_width & 1;
  }
  const N = 31;
  const FULL = 2 ** N;
  const HALF = FULL >>> 1;
  const QRTR = HALF >> 1;
  const MASK = FULL - 1;
  let register = 0;
  for (let i = 0; i < N; i++)
    register = register << 1 | read_bit();
  let symbols = [];
  let low = 0;
  let range = FULL;
  while (true) {
    let value = Math.floor(((register - low + 1) * total - 1) / range);
    let start = 0;
    let end = symbol_count;
    while (end - start > 1) {
      let mid = start + end >>> 1;
      if (value < acc[mid]) {
        end = mid;
      } else {
        start = mid;
      }
    }
    if (start == 0)
      break;
    symbols.push(start);
    let a = low + Math.floor(range * acc[start] / total);
    let b = low + Math.floor(range * acc[start + 1] / total) - 1;
    while (((a ^ b) & HALF) == 0) {
      register = register << 1 & MASK | read_bit();
      a = a << 1 & MASK;
      b = b << 1 & MASK | 1;
    }
    while (a & ~b & QRTR) {
      register = register & HALF | register << 1 & MASK >>> 1 | read_bit();
      a = a << 1 ^ HALF;
      b = (b ^ HALF) << 1 | HALF | 1;
    }
    low = a;
    range = 1 + b - a;
  }
  let offset = symbol_count - 4;
  return symbols.map((x) => {
    switch (x - offset) {
      case 3:
        return offset + 65792 + (bytes[pos_payload++] << 16 | bytes[pos_payload++] << 8 | bytes[pos_payload++]);
      case 2:
        return offset + 256 + (bytes[pos_payload++] << 8 | bytes[pos_payload++]);
      case 1:
        return offset + bytes[pos_payload++];
      default:
        return x - 1;
    }
  });
}
function read_payload(v) {
  let pos = 0;
  return () => v[pos++];
}
function read_compressed_payload(s) {
  return read_payload(decode_arithmetic(unsafe_atob(s)));
}
function unsafe_atob(s) {
  let lookup = [];
  [..."ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"].forEach((c, i) => lookup[c.charCodeAt(0)] = i);
  let n = s.length;
  let ret = new Uint8Array(6 * n >> 3);
  for (let i = 0, pos = 0, width = 0, carry = 0; i < n; i++) {
    carry = carry << 6 | lookup[s.charCodeAt(i)];
    width += 6;
    if (width >= 8) {
      ret[pos++] = carry >> (width -= 8);
    }
  }
  return ret;
}
function signed(i) {
  return i & 1 ? ~i >> 1 : i >> 1;
}
function read_deltas(n, next) {
  let v = Array(n);
  for (let i = 0, x = 0; i < n; i++)
    v[i] = x += signed(next());
  return v;
}
function read_sorted(next, prev = 0) {
  let ret = [];
  while (true) {
    let x = next();
    let n = next();
    if (!n)
      break;
    prev += x;
    for (let i = 0; i < n; i++) {
      ret.push(prev + i);
    }
    prev += n + 1;
  }
  return ret;
}
function read_sorted_arrays(next) {
  return read_array_while(() => {
    let v = read_sorted(next);
    if (v.length)
      return v;
  });
}
function read_mapped(next) {
  let ret = [];
  while (true) {
    let w = next();
    if (w == 0)
      break;
    ret.push(read_linear_table(w, next));
  }
  while (true) {
    let w = next() - 1;
    if (w < 0)
      break;
    ret.push(read_replacement_table(w, next));
  }
  return ret.flat();
}
function read_array_while(next) {
  let v = [];
  while (true) {
    let x = next(v.length);
    if (!x)
      break;
    v.push(x);
  }
  return v;
}
function read_transposed(n, w, next) {
  let m = Array(n).fill().map(() => []);
  for (let i = 0; i < w; i++) {
    read_deltas(n, next).forEach((x, j) => m[j].push(x));
  }
  return m;
}
function read_linear_table(w, next) {
  let dx = 1 + next();
  let dy = next();
  let vN = read_array_while(next);
  let m = read_transposed(vN.length, 1 + w, next);
  return m.flatMap((v, i) => {
    let [x, ...ys] = v;
    return Array(vN[i]).fill().map((_, j) => {
      let j_dy = j * dy;
      return [x + j * dx, ys.map((y) => y + j_dy)];
    });
  });
}
function read_replacement_table(w, next) {
  let n = 1 + next();
  let m = read_transposed(n, 1 + w, next);
  return m.map((v) => [v[0], v.slice(1)]);
}
function read_trie(next) {
  let ret = [];
  let sorted = read_sorted(next);
  expand(decode([]), []);
  return ret;
  function decode(Q) {
    let S = next();
    let B = read_array_while(() => {
      let cps = read_sorted(next).map((i) => sorted[i]);
      if (cps.length)
        return decode(cps);
    });
    return { S, B, Q };
  }
  function expand({ S, B }, cps, saved) {
    if (S & 4 && saved === cps[cps.length - 1])
      return;
    if (S & 2)
      saved = cps[cps.length - 1];
    if (S & 1)
      ret.push(cps);
    for (let br of B) {
      for (let cp of br.Q) {
        expand(br, [...cps, cp], saved);
      }
    }
  }
}
function hex_cp(cp) {
  return cp.toString(16).toUpperCase().padStart(2, "0");
}
function quote_cp(cp) {
  return `{${hex_cp(cp)}}`;
}
function explode_cp(s) {
  let cps = [];
  for (let pos = 0, len = s.length; pos < len; ) {
    let cp = s.codePointAt(pos);
    pos += cp < 65536 ? 1 : 2;
    cps.push(cp);
  }
  return cps;
}
function str_from_cps(cps) {
  const chunk = 4096;
  let len = cps.length;
  if (len < chunk)
    return String.fromCodePoint(...cps);
  let buf = [];
  for (let i = 0; i < len; ) {
    buf.push(String.fromCodePoint(...cps.slice(i, i += chunk)));
  }
  return buf.join("");
}
function compare_arrays(a, b) {
  let n = a.length;
  let c = n - b.length;
  for (let i = 0; c == 0 && i < n; i++)
    c = a[i] - b[i];
  return c;
}
var COMPRESSED = "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";
var S0 = 44032;
var L0 = 4352;
var V0 = 4449;
var T0 = 4519;
var L_COUNT = 19;
var V_COUNT = 21;
var T_COUNT = 28;
var N_COUNT = V_COUNT * T_COUNT;
var S_COUNT = L_COUNT * N_COUNT;
var S1 = S0 + S_COUNT;
var L1 = L0 + L_COUNT;
var V1 = V0 + V_COUNT;
var T1 = T0 + T_COUNT;
function unpack_cc(packed) {
  return packed >> 24 & 255;
}
function unpack_cp(packed) {
  return packed & 16777215;
}
var SHIFTED_RANK;
var EXCLUSIONS;
var DECOMP;
var RECOMP;
function init$1() {
  let r = read_compressed_payload(COMPRESSED);
  SHIFTED_RANK = new Map(read_sorted_arrays(r).flatMap((v, i) => v.map((x) => [x, i + 1 << 24])));
  EXCLUSIONS = new Set(read_sorted(r));
  DECOMP = /* @__PURE__ */ new Map();
  RECOMP = /* @__PURE__ */ new Map();
  for (let [cp, cps] of read_mapped(r)) {
    if (!EXCLUSIONS.has(cp) && cps.length == 2) {
      let [a, b] = cps;
      let bucket = RECOMP.get(a);
      if (!bucket) {
        bucket = /* @__PURE__ */ new Map();
        RECOMP.set(a, bucket);
      }
      bucket.set(b, cp);
    }
    DECOMP.set(cp, cps.reverse());
  }
}
function is_hangul(cp) {
  return cp >= S0 && cp < S1;
}
function compose_pair(a, b) {
  if (a >= L0 && a < L1 && b >= V0 && b < V1) {
    return S0 + (a - L0) * N_COUNT + (b - V0) * T_COUNT;
  } else if (is_hangul(a) && b > T0 && b < T1 && (a - S0) % T_COUNT == 0) {
    return a + (b - T0);
  } else {
    let recomp = RECOMP.get(a);
    if (recomp) {
      recomp = recomp.get(b);
      if (recomp) {
        return recomp;
      }
    }
    return -1;
  }
}
function decomposed(cps) {
  if (!SHIFTED_RANK)
    init$1();
  let ret = [];
  let buf = [];
  let check_order = false;
  function add(cp) {
    let cc = SHIFTED_RANK.get(cp);
    if (cc) {
      check_order = true;
      cp |= cc;
    }
    ret.push(cp);
  }
  for (let cp of cps) {
    while (true) {
      if (cp < 128) {
        ret.push(cp);
      } else if (is_hangul(cp)) {
        let s_index = cp - S0;
        let l_index = s_index / N_COUNT | 0;
        let v_index = s_index % N_COUNT / T_COUNT | 0;
        let t_index = s_index % T_COUNT;
        add(L0 + l_index);
        add(V0 + v_index);
        if (t_index > 0)
          add(T0 + t_index);
      } else {
        let mapped = DECOMP.get(cp);
        if (mapped) {
          buf.push(...mapped);
        } else {
          add(cp);
        }
      }
      if (!buf.length)
        break;
      cp = buf.pop();
    }
  }
  if (check_order && ret.length > 1) {
    let prev_cc = unpack_cc(ret[0]);
    for (let i = 1; i < ret.length; i++) {
      let cc = unpack_cc(ret[i]);
      if (cc == 0 || prev_cc <= cc) {
        prev_cc = cc;
        continue;
      }
      let j = i - 1;
      while (true) {
        let tmp = ret[j + 1];
        ret[j + 1] = ret[j];
        ret[j] = tmp;
        if (!j)
          break;
        prev_cc = unpack_cc(ret[--j]);
        if (prev_cc <= cc)
          break;
      }
      prev_cc = unpack_cc(ret[i]);
    }
  }
  return ret;
}
function composed_from_decomposed(v) {
  let ret = [];
  let stack = [];
  let prev_cp = -1;
  let prev_cc = 0;
  for (let packed of v) {
    let cc = unpack_cc(packed);
    let cp = unpack_cp(packed);
    if (prev_cp == -1) {
      if (cc == 0) {
        prev_cp = cp;
      } else {
        ret.push(cp);
      }
    } else if (prev_cc > 0 && prev_cc >= cc) {
      if (cc == 0) {
        ret.push(prev_cp, ...stack);
        stack.length = 0;
        prev_cp = cp;
      } else {
        stack.push(cp);
      }
      prev_cc = cc;
    } else {
      let composed = compose_pair(prev_cp, cp);
      if (composed >= 0) {
        prev_cp = composed;
      } else if (prev_cc == 0 && cc == 0) {
        ret.push(prev_cp);
        prev_cp = cp;
      } else {
        stack.push(cp);
        prev_cc = cc;
      }
    }
  }
  if (prev_cp >= 0) {
    ret.push(prev_cp, ...stack);
  }
  return ret;
}
function nfd(cps) {
  return decomposed(cps).map(unpack_cp);
}
function nfc(cps) {
  return composed_from_decomposed(decomposed(cps));
}
var HYPHEN = 45;
var STOP_CH = ".";
var FE0F = 65039;
var UNIQUE_PH = 1;
var Array_from = (x) => Array.from(x);
function group_has_cp(g, cp) {
  return g.P.has(cp) || g.Q.has(cp);
}
var Emoji = class extends Array {
  get is_emoji() {
    return true;
  }
  // free tagging system
};
var MAPPED;
var IGNORED;
var CM;
var NSM;
var ESCAPE;
var NFC_CHECK;
var GROUPS;
var WHOLE_VALID;
var WHOLE_MAP;
var VALID;
var EMOJI_LIST;
var EMOJI_ROOT;
function init() {
  if (MAPPED)
    return;
  let r = read_compressed_payload(COMPRESSED$1);
  const read_sorted_array = () => read_sorted(r);
  const read_sorted_set = () => new Set(read_sorted_array());
  const set_add_many = (set, v) => v.forEach((x) => set.add(x));
  MAPPED = new Map(read_mapped(r));
  IGNORED = read_sorted_set();
  CM = read_sorted_array();
  NSM = new Set(read_sorted_array().map((i) => CM[i]));
  CM = new Set(CM);
  ESCAPE = read_sorted_set();
  NFC_CHECK = read_sorted_set();
  let chunks = read_sorted_arrays(r);
  let unrestricted = r();
  const read_chunked = () => {
    let set = /* @__PURE__ */ new Set();
    read_sorted_array().forEach((i) => set_add_many(set, chunks[i]));
    set_add_many(set, read_sorted_array());
    return set;
  };
  GROUPS = read_array_while((i) => {
    let N = read_array_while(r).map((x) => x + 96);
    if (N.length) {
      let R = i >= unrestricted;
      N[0] -= 32;
      N = str_from_cps(N);
      if (R)
        N = `Restricted[${N}]`;
      let P = read_chunked();
      let Q = read_chunked();
      let M = !r();
      return { N, P, Q, M, R };
    }
  });
  WHOLE_VALID = read_sorted_set();
  WHOLE_MAP = /* @__PURE__ */ new Map();
  let wholes = read_sorted_array().concat(Array_from(WHOLE_VALID)).sort((a, b) => a - b);
  wholes.forEach((cp, i) => {
    let d = r();
    let w = wholes[i] = d ? wholes[i - d] : { V: [], M: /* @__PURE__ */ new Map() };
    w.V.push(cp);
    if (!WHOLE_VALID.has(cp)) {
      WHOLE_MAP.set(cp, w);
    }
  });
  for (let { V, M } of new Set(WHOLE_MAP.values())) {
    let recs = [];
    for (let cp of V) {
      let gs = GROUPS.filter((g) => group_has_cp(g, cp));
      let rec = recs.find(({ G }) => gs.some((g) => G.has(g)));
      if (!rec) {
        rec = { G: /* @__PURE__ */ new Set(), V: [] };
        recs.push(rec);
      }
      rec.V.push(cp);
      set_add_many(rec.G, gs);
    }
    let union = recs.flatMap((x) => Array_from(x.G));
    for (let { G, V: V2 } of recs) {
      let complement = new Set(union.filter((g) => !G.has(g)));
      for (let cp of V2) {
        M.set(cp, complement);
      }
    }
  }
  VALID = /* @__PURE__ */ new Set();
  let multi = /* @__PURE__ */ new Set();
  const add_to_union = (cp) => VALID.has(cp) ? multi.add(cp) : VALID.add(cp);
  for (let g of GROUPS) {
    for (let cp of g.P)
      add_to_union(cp);
    for (let cp of g.Q)
      add_to_union(cp);
  }
  for (let cp of VALID) {
    if (!WHOLE_MAP.has(cp) && !multi.has(cp)) {
      WHOLE_MAP.set(cp, UNIQUE_PH);
    }
  }
  set_add_many(VALID, nfd(VALID));
  EMOJI_LIST = read_trie(r).map((v) => Emoji.from(v)).sort(compare_arrays);
  EMOJI_ROOT = /* @__PURE__ */ new Map();
  for (let cps of EMOJI_LIST) {
    let prev = [EMOJI_ROOT];
    for (let cp of cps) {
      let next = prev.map((node) => {
        let child = node.get(cp);
        if (!child) {
          child = /* @__PURE__ */ new Map();
          node.set(cp, child);
        }
        return child;
      });
      if (cp === FE0F) {
        prev.push(...next);
      } else {
        prev = next;
      }
    }
    for (let x of prev) {
      x.V = cps;
    }
  }
}
function quoted_cp(cp) {
  return (should_escape(cp) ? "" : `${bidi_qq(safe_str_from_cps([cp]))} `) + quote_cp(cp);
}
function bidi_qq(s) {
  return `"${s}"‎`;
}
function check_label_extension(cps) {
  if (cps.length >= 4 && cps[2] == HYPHEN && cps[3] == HYPHEN) {
    throw new Error(`invalid label extension: "${str_from_cps(cps.slice(0, 4))}"`);
  }
}
function check_leading_underscore(cps) {
  const UNDERSCORE = 95;
  for (let i = cps.lastIndexOf(UNDERSCORE); i > 0; ) {
    if (cps[--i] !== UNDERSCORE) {
      throw new Error("underscore allowed only at start");
    }
  }
}
function check_fenced(cps) {
  let cp = cps[0];
  let prev = FENCED.get(cp);
  if (prev)
    throw error_placement(`leading ${prev}`);
  let n = cps.length;
  let last = -1;
  for (let i = 1; i < n; i++) {
    cp = cps[i];
    let match = FENCED.get(cp);
    if (match) {
      if (last == i)
        throw error_placement(`${prev} + ${match}`);
      last = i + 1;
      prev = match;
    }
  }
  if (last == n)
    throw error_placement(`trailing ${prev}`);
}
function safe_str_from_cps(cps, max = Infinity, quoter = quote_cp) {
  let buf = [];
  if (is_combining_mark(cps[0]))
    buf.push("◌");
  if (cps.length > max) {
    max >>= 1;
    cps = [...cps.slice(0, max), 8230, ...cps.slice(-max)];
  }
  let prev = 0;
  let n = cps.length;
  for (let i = 0; i < n; i++) {
    let cp = cps[i];
    if (should_escape(cp)) {
      buf.push(str_from_cps(cps.slice(prev, i)));
      buf.push(quoter(cp));
      prev = i + 1;
    }
  }
  buf.push(str_from_cps(cps.slice(prev, n)));
  return buf.join("");
}
function is_combining_mark(cp) {
  init();
  return CM.has(cp);
}
function should_escape(cp) {
  init();
  return ESCAPE.has(cp);
}
function ens_normalize(name) {
  return flatten(split(name, nfc, filter_fe0f));
}
function split(name, nf, ef) {
  if (!name)
    return [];
  init();
  let offset = 0;
  return name.split(STOP_CH).map((label) => {
    let input = explode_cp(label);
    let info = {
      input,
      offset
      // codepoint, not substring!
    };
    offset += input.length + 1;
    try {
      let tokens = info.tokens = tokens_from_str(input, nf, ef);
      let token_count = tokens.length;
      let type;
      if (!token_count) {
        throw new Error(`empty label`);
      }
      let norm = info.output = tokens.flat();
      check_leading_underscore(norm);
      let emoji = info.emoji = token_count > 1 || tokens[0].is_emoji;
      if (!emoji && norm.every((cp) => cp < 128)) {
        check_label_extension(norm);
        type = "ASCII";
      } else {
        let chars = tokens.flatMap((x) => x.is_emoji ? [] : x);
        if (!chars.length) {
          type = "Emoji";
        } else {
          if (CM.has(norm[0]))
            throw error_placement("leading combining mark");
          for (let i = 1; i < token_count; i++) {
            let cps = tokens[i];
            if (!cps.is_emoji && CM.has(cps[0])) {
              throw error_placement(`emoji + combining mark: "${str_from_cps(tokens[i - 1])} + ${safe_str_from_cps([cps[0]])}"`);
            }
          }
          check_fenced(norm);
          let unique = Array_from(new Set(chars));
          let [g] = determine_group(unique);
          check_group(g, chars);
          check_whole(g, unique);
          type = g.N;
        }
      }
      info.type = type;
    } catch (err) {
      info.error = err;
    }
    return info;
  });
}
function check_whole(group, unique) {
  let maker;
  let shared = [];
  for (let cp of unique) {
    let whole = WHOLE_MAP.get(cp);
    if (whole === UNIQUE_PH)
      return;
    if (whole) {
      let set = whole.M.get(cp);
      maker = maker ? maker.filter((g) => set.has(g)) : Array_from(set);
      if (!maker.length)
        return;
    } else {
      shared.push(cp);
    }
  }
  if (maker) {
    for (let g of maker) {
      if (shared.every((cp) => group_has_cp(g, cp))) {
        throw new Error(`whole-script confusable: ${group.N}/${g.N}`);
      }
    }
  }
}
function determine_group(unique) {
  let groups = GROUPS;
  for (let cp of unique) {
    let gs = groups.filter((g) => group_has_cp(g, cp));
    if (!gs.length) {
      if (!GROUPS.some((g) => group_has_cp(g, cp))) {
        throw error_disallowed(cp);
      } else {
        throw error_group_member(groups[0], cp);
      }
    }
    groups = gs;
    if (gs.length == 1)
      break;
  }
  return groups;
}
function flatten(split2) {
  return split2.map(({ input, error, output }) => {
    if (error) {
      let msg = error.message;
      throw new Error(split2.length == 1 ? msg : `Invalid label ${bidi_qq(safe_str_from_cps(input, 63))}: ${msg}`);
    }
    return str_from_cps(output);
  }).join(STOP_CH);
}
function error_disallowed(cp) {
  return new Error(`disallowed character: ${quoted_cp(cp)}`);
}
function error_group_member(g, cp) {
  let quoted = quoted_cp(cp);
  let gg = GROUPS.find((g2) => g2.P.has(cp));
  if (gg) {
    quoted = `${gg.N} ${quoted}`;
  }
  return new Error(`illegal mixture: ${g.N} + ${quoted}`);
}
function error_placement(where) {
  return new Error(`illegal placement: ${where}`);
}
function check_group(g, cps) {
  for (let cp of cps) {
    if (!group_has_cp(g, cp)) {
      throw error_group_member(g, cp);
    }
  }
  if (g.M) {
    let decomposed2 = nfd(cps);
    for (let i = 1, e = decomposed2.length; i < e; i++) {
      if (NSM.has(decomposed2[i])) {
        let j = i + 1;
        for (let cp; j < e && NSM.has(cp = decomposed2[j]); j++) {
          for (let k = i; k < j; k++) {
            if (decomposed2[k] == cp) {
              throw new Error(`duplicate non-spacing marks: ${quoted_cp(cp)}`);
            }
          }
        }
        if (j - i > NSM_MAX) {
          throw new Error(`excessive non-spacing marks: ${bidi_qq(safe_str_from_cps(decomposed2.slice(i - 1, j)))} (${j - i}/${NSM_MAX})`);
        }
        i = j;
      }
    }
  }
}
function tokens_from_str(input, nf, ef) {
  let ret = [];
  let chars = [];
  input = input.slice().reverse();
  while (input.length) {
    let emoji = consume_emoji_reversed(input);
    if (emoji) {
      if (chars.length) {
        ret.push(nf(chars));
        chars = [];
      }
      ret.push(ef(emoji));
    } else {
      let cp = input.pop();
      if (VALID.has(cp)) {
        chars.push(cp);
      } else {
        let cps = MAPPED.get(cp);
        if (cps) {
          chars.push(...cps);
        } else if (!IGNORED.has(cp)) {
          throw error_disallowed(cp);
        }
      }
    }
  }
  if (chars.length) {
    ret.push(nf(chars));
  }
  return ret;
}
function filter_fe0f(cps) {
  return cps.filter((cp) => cp != FE0F);
}
function consume_emoji_reversed(cps, eaten) {
  let node = EMOJI_ROOT;
  let emoji;
  let pos = cps.length;
  while (pos) {
    node = node.get(cps[--pos]);
    if (!node)
      break;
    let { V } = node;
    if (V) {
      emoji = V;
      if (eaten)
        eaten.push(...cps.slice(pos).reverse());
      cps.length = pos;
    }
  }
  return emoji;
}

// node_modules/web3-eth-ens/lib/esm/utils.js
var normalize = (name) => ens_normalize(name);
var namehash = (inputName) => {
  let node = "";
  for (let i = 0; i < 32; i += 1) {
    node += "00";
  }
  if (inputName) {
    const name = normalize(inputName);
    const labels = name.split(".");
    for (let i = labels.length - 1; i >= 0; i -= 1) {
      const labelSha = sha3Raw(labels[i]).slice(2);
      node = sha3Raw(`0x${node}${labelSha}`).slice(2);
    }
  }
  return `0x${node}`;
};

// node_modules/web3-eth-ens/lib/esm/registry.js
var __awaiter = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var Registry = class {
  constructor(context, customRegistryAddress) {
    this.contract = new Contract(ENSRegistryAbi, customRegistryAddress !== null && customRegistryAddress !== void 0 ? customRegistryAddress : registryAddresses.main, context);
    this.context = context;
  }
  getOwner(name) {
    return __awaiter(this, void 0, void 0, function* () {
      try {
        const result = this.contract.methods.owner(namehash(name)).call();
        return result;
      } catch (error) {
        throw new Error();
      }
    });
  }
  getTTL(name) {
    return __awaiter(this, void 0, void 0, function* () {
      try {
        return this.contract.methods.ttl(namehash(name)).call();
      } catch (error) {
        throw new Error();
      }
    });
  }
  recordExists(name) {
    return __awaiter(this, void 0, void 0, function* () {
      try {
        const promise = this.contract.methods.recordExists(namehash(name)).call();
        return promise;
      } catch (error) {
        throw new Error();
      }
    });
  }
  getResolver(name) {
    return __awaiter(this, void 0, void 0, function* () {
      try {
        return this.contract.methods.resolver(namehash(name)).call().then((address) => {
          if (typeof address === "string") {
            const contract = new Contract(PublicResolverAbi, address, this.context);
            return contract;
          }
          throw new Error();
        });
      } catch (error) {
        throw new Error();
      }
    });
  }
  get events() {
    return this.contract.events;
  }
};

// node_modules/web3-eth-ens/lib/esm/resolver.js
var __awaiter2 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var Resolver = class {
  constructor(registry) {
    this.registry = registry;
  }
  getResolverContractAdapter(ENSName) {
    return __awaiter2(this, void 0, void 0, function* () {
      return this.registry.getResolver(ENSName);
    });
  }
  //  https://eips.ethereum.org/EIPS/eip-165
  // eslint-disable-next-line class-methods-use-this
  checkInterfaceSupport(resolverContract, methodName) {
    var _a, _b;
    return __awaiter2(this, void 0, void 0, function* () {
      if (isNullish(interfaceIds[methodName]))
        throw new ResolverMethodMissingError((_a = resolverContract.options.address) !== null && _a !== void 0 ? _a : "", methodName);
      const supported = yield resolverContract.methods.supportsInterface(interfaceIds[methodName]).call();
      if (!supported)
        throw new ResolverMethodMissingError((_b = resolverContract.options.address) !== null && _b !== void 0 ? _b : "", methodName);
    });
  }
  supportsInterface(ENSName, interfaceId) {
    var _a;
    return __awaiter2(this, void 0, void 0, function* () {
      const resolverContract = yield this.getResolverContractAdapter(ENSName);
      let interfaceIdParam = interfaceId;
      if (!isHexStrict(interfaceIdParam)) {
        interfaceIdParam = (_a = sha3(interfaceId)) !== null && _a !== void 0 ? _a : "";
        if (interfaceId === "")
          throw new Error("Invalid interface Id");
        interfaceIdParam = interfaceIdParam.slice(0, 10);
      }
      return resolverContract.methods.supportsInterface(interfaceIdParam).call();
    });
  }
  // eslint-disable-next-line @typescript-eslint/no-inferrable-types
  getAddress(ENSName, coinType = 60) {
    return __awaiter2(this, void 0, void 0, function* () {
      const resolverContract = yield this.getResolverContractAdapter(ENSName);
      yield this.checkInterfaceSupport(resolverContract, methodsInInterface.addr);
      return resolverContract.methods.addr(namehash(ENSName), coinType).call();
    });
  }
  getPubkey(ENSName) {
    return __awaiter2(this, void 0, void 0, function* () {
      const resolverContract = yield this.getResolverContractAdapter(ENSName);
      yield this.checkInterfaceSupport(resolverContract, methodsInInterface.pubkey);
      return resolverContract.methods.pubkey(namehash(ENSName)).call();
    });
  }
  getContenthash(ENSName) {
    return __awaiter2(this, void 0, void 0, function* () {
      const resolverContract = yield this.getResolverContractAdapter(ENSName);
      yield this.checkInterfaceSupport(resolverContract, methodsInInterface.contenthash);
      return resolverContract.methods.contenthash(namehash(ENSName)).call();
    });
  }
};

// node_modules/web3-eth-ens/lib/esm/ens.js
var __awaiter3 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var ENS = class extends Web3Context {
  /**
   * Use to create an instance of ENS
   * @param registryAddr - (Optional) The address of the ENS registry (default: mainnet registry address)
   * @param provider - (Optional) The provider to use for the ENS instance
   * @example
   * ```ts
   * const ens = new ENS(
   * 	"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
   * 	"http://localhost:8545"
   * );
   *
   * console.log( ens.defaultChain);
   * > mainnet
   * ```
   */
  constructor(registryAddr, provider) {
    super(provider !== null && provider !== void 0 ? provider : "");
    this.registryAddress = registryAddr !== null && registryAddr !== void 0 ? registryAddr : registryAddresses.main;
    this._registry = new Registry(this.getContextObject(), registryAddr);
    this._resolver = new Resolver(this._registry);
  }
  /**
   * Returns the Resolver by the given address
   * @param name - The name of the ENS domain
   * @returns - An contract instance of the resolver
   *
   * @example
   * ```ts
   * const resolver = await ens.getResolver('resolver');
   *
   * console.log(resolver.options.address);
   * > '0x1234567890123456789012345678901234567890'
   * ```
   */
  getResolver(name) {
    return __awaiter3(this, void 0, void 0, function* () {
      return this._registry.getResolver(name);
    });
  }
  /**
   * Returns true if the record exists
   * @param name - The ENS name
   * @returns - Returns `true` if node exists in this ENS registry. This will return `false` for records that are in the legacy ENS registry but have not yet been migrated to the new one.
   * @example
   * ```ts
   * const exists = await web3.eth.ens.recordExists('ethereum.eth');
   * ```
   */
  recordExists(name) {
    return __awaiter3(this, void 0, void 0, function* () {
      return this._registry.recordExists(name);
    });
  }
  /**
   * Returns the caching TTL (time-to-live) of an ENS name.
   * @param name - The ENS name
   * @returns - Returns the caching TTL (time-to-live) of a name.
   * @example
   * ```ts
   * const owner = await web3.eth.ens.getTTL('ethereum.eth');
   * ```
   */
  getTTL(name) {
    return __awaiter3(this, void 0, void 0, function* () {
      return this._registry.getTTL(name);
    });
  }
  /**
   * Returns the owner by the given name and current configured or detected Registry
   * @param name - The ENS name
   * @returns - Returns the address of the owner of the name.
   * @example
   * ```ts
   * const owner = await web3.eth.ens.getOwner('ethereum.eth');
   * ```
   */
  getOwner(name) {
    return __awaiter3(this, void 0, void 0, function* () {
      return this._registry.getOwner(name);
    });
  }
  /**
   * Resolves an ENS name to an Ethereum address.
   * @param ENSName - The ENS name to resolve
   * @param coinType - (Optional) The coin type, defaults to 60 (ETH)
   * @returns - The Ethereum address of the given name
   * ```ts
   * const address = await web3.eth.ens.getAddress('ethereum.eth');
   * console.log(address);
   * > '0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359'
   * ```
   */
  getAddress(ENSName, coinType = 60) {
    return __awaiter3(this, void 0, void 0, function* () {
      return this._resolver.getAddress(ENSName, coinType);
    });
  }
  /**
   * Returns the X and Y coordinates of the curve point for the public key.
   * @param ENSName - The ENS name
   * @returns - The X and Y coordinates of the curve point for the public key
   * @example
   * ```ts
   * const key = await web3.eth.ens.getPubkey('ethereum.eth');
   * console.log(key);
   * > {
   * "0": "0x0000000000000000000000000000000000000000000000000000000000000000",
   * "1": "0x0000000000000000000000000000000000000000000000000000000000000000",
   * "x": "0x0000000000000000000000000000000000000000000000000000000000000000",
   * "y": "0x0000000000000000000000000000000000000000000000000000000000000000"
   * }
   * ```
   */
  getPubkey(ENSName) {
    return __awaiter3(this, void 0, void 0, function* () {
      return this._resolver.getPubkey(ENSName);
    });
  }
  /**
   * Returns the content hash object associated with an ENS node.
   * @param ENSName - The ENS name
   * @returns - The content hash object associated with an ENS node
   * @example
   * ```ts
   * const hash = await web3.eth.ens.getContenthash('ethereum.eth');
   * console.log(hash);
   * > 'QmaEBknbGT4bTQiQoe2VNgBJbRfygQGktnaW5TbuKixjYL'
   * ```
   */
  getContenthash(ENSName) {
    return __awaiter3(this, void 0, void 0, function* () {
      return this._resolver.getContenthash(ENSName);
    });
  }
  /**
   * Checks if the current used network is synced and looks for ENS support there.
   * Throws an error if not.
   * @returns - The address of the ENS registry if the network has been detected successfully
   * @example
   * ```ts
   * console.log(await web3.eth.ens.checkNetwork());
   * > '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e'
   * ```
   */
  checkNetwork() {
    return __awaiter3(this, void 0, void 0, function* () {
      const now = Date.now() / 1e3;
      if (!this._lastSyncCheck || now - this._lastSyncCheck > 3600) {
        const syncInfo = yield isSyncing(this);
        if (!(typeof syncInfo === "boolean" && !syncInfo)) {
          throw new ENSNetworkNotSyncedError();
        }
        this._lastSyncCheck = now;
      }
      if (this._detectedAddress) {
        return this._detectedAddress;
      }
      const networkType = yield getId(this, Object.assign(Object.assign({}, DEFAULT_RETURN_FORMAT), { number: FMT_NUMBER.HEX }));
      const addr = registryAddresses[networkIds[networkType]];
      if (typeof addr === "undefined") {
        throw new ENSUnsupportedNetworkError(networkType);
      }
      this._detectedAddress = addr;
      return this._detectedAddress;
    });
  }
  /**
   * Returns true if the related Resolver does support the given signature or interfaceId.
   * @param ENSName - The ENS name
   * @param interfaceId - The signature of the function or the interfaceId as described in the ENS documentation
   * @returns - `true` if the related Resolver does support the given signature or interfaceId.
   * @example
   * ```ts
   * const supports = await web3.eth.ens.supportsInterface('ethereum.eth', 'addr(bytes32');
   * console.log(supports);
   * > true
   * ```
   */
  supportsInterface(ENSName, interfaceId) {
    return __awaiter3(this, void 0, void 0, function* () {
      return this._resolver.supportsInterface(ENSName, interfaceId);
    });
  }
  /**
   * @returns - Returns all events that can be emitted by the ENS registry.
   */
  get events() {
    return this._registry.events;
  }
};

// node_modules/web3-eth-personal/lib/esm/index.js
var esm_exports15 = {};
__export(esm_exports15, {
  Personal: () => Personal,
  default: () => esm_default2
});

// node_modules/web3-eth-personal/lib/esm/rpc_method_wrappers.js
var __awaiter4 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var getAccounts = (requestManager) => __awaiter4(void 0, void 0, void 0, function* () {
  const result = yield personal_rpc_methods_exports.getAccounts(requestManager);
  return result.map(toChecksumAddress);
});
var newAccount = (requestManager, password) => __awaiter4(void 0, void 0, void 0, function* () {
  validator.validate(["string"], [password]);
  const result = yield personal_rpc_methods_exports.newAccount(requestManager, password);
  return toChecksumAddress(result);
});
var unlockAccount = (requestManager, address, password, unlockDuration) => __awaiter4(void 0, void 0, void 0, function* () {
  validator.validate(["address", "string", "uint"], [address, password, unlockDuration]);
  return personal_rpc_methods_exports.unlockAccount(requestManager, address, password, unlockDuration);
});
var lockAccount = (requestManager, address) => __awaiter4(void 0, void 0, void 0, function* () {
  validator.validate(["address"], [address]);
  return personal_rpc_methods_exports.lockAccount(requestManager, address);
});
var importRawKey = (requestManager, keyData, passphrase) => __awaiter4(void 0, void 0, void 0, function* () {
  validator.validate(["string", "string"], [keyData, passphrase]);
  return personal_rpc_methods_exports.importRawKey(requestManager, keyData, passphrase);
});
var sendTransaction2 = (requestManager, tx, passphrase) => __awaiter4(void 0, void 0, void 0, function* () {
  const formattedTx = formatTransaction(tx, ETH_DATA_FORMAT);
  return personal_rpc_methods_exports.sendTransaction(requestManager, formattedTx, passphrase);
});
var signTransaction3 = (requestManager, tx, passphrase) => __awaiter4(void 0, void 0, void 0, function* () {
  const formattedTx = formatTransaction(tx, ETH_DATA_FORMAT);
  return personal_rpc_methods_exports.signTransaction(requestManager, formattedTx, passphrase);
});
var sign3 = (requestManager, data, address, passphrase) => __awaiter4(void 0, void 0, void 0, function* () {
  validator.validate(["string", "address", "string"], [data, address, passphrase]);
  const dataToSign = isHexStrict(data) ? data : utf8ToHex(data);
  return personal_rpc_methods_exports.sign(requestManager, dataToSign, address, passphrase);
});
var ecRecover = (requestManager, signedData, signature) => __awaiter4(void 0, void 0, void 0, function* () {
  validator.validate(["string", "string"], [signedData, signature]);
  const signedDataString = isHexStrict(signedData) ? signedData : utf8ToHex(signedData);
  return personal_rpc_methods_exports.ecRecover(requestManager, signedDataString, signature);
});

// node_modules/web3-eth-personal/lib/esm/personal.js
var __awaiter5 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var Personal = class extends Web3Context {
  /**
   *Returns a list of accounts the node controls by using the provider and calling the RPC method personal_listAccounts. Using `web3.eth.accounts.create()` will not add accounts into this list. For that use `web3.eth.personal.newAccount()`.
   * @returns - An array of addresses controlled by the node.
   * @example
   * ```ts
   *  const accounts = await personal.getAccounts();
   * console.log(accounts);
   * >
   * [
   * 	'0x79D7BbaC53C9aF700d0B250e9AE789E503Fcd6AE',
   * 	'0xe2597eB05CF9a87eB1309e86750C903EC38E527e',
   * 	'0x7eD0e85B8E1E925600B4373e6d108F34AB38a401',
   * 	'0xE4bEEf667408b99053dC147Ed19592aDa0d77F59',
   * 	'0x7AB80aeB6bb488B7f6c41c58e83Ef248eB39c882',
   * 	'0x12B1D9d74d73b1C3A245B19C1C5501c653aF1af9',
   * 	'0x1a6075A263Ee140e00Dbf8E374Fc5A443d097894',
   * 	'0x4FEC0A51024B13030D26E70904B066C6d41157A5',
   * 	'0x03095dc4857BB26f3a4550c5651Df8b7f6b6B1Ef',
   * 	'0xac0B9b6e8A17991cb172B2ABAF45Fb5eb769E540'
   * ]
   * ```
   */
  getAccounts() {
    return __awaiter5(this, void 0, void 0, function* () {
      return getAccounts(this.requestManager);
    });
  }
  /**
   * Creates a new account and returns its address.
   * **_NOTE:_**  This function sends a sensitive information like password. Never call this function over a unsecured Websocket or HTTP provider, as your password will be sent in plain text!
   * @param password - The password to encrypt the account with.
   * @returns - The address of the new account.
   * @example
   * ```ts
   * const addr = await web3.eth.personal.newAccount('password');
   * console.log(addr);
   * > '0x1234567891011121314151617181920212223456'
   * ```
   */
  newAccount(password) {
    return __awaiter5(this, void 0, void 0, function* () {
      return newAccount(this.requestManager, password);
    });
  }
  /**
   * Unlocks an account for a given duration.
   * @param address - The address of the account to unlock.
   * @param password - The password of the account to unlock.
   * @param unlockDuration - The duration in seconds to unlock the account for.
   * @example
   * ```ts
   * await personal.unlockAccount(
   * 	"0x0d4aa485ecbc499c70860feb7e5aaeaf5fd8172e",
   * 	"123456",
   * 	600
   * );
   * ```
   */
  unlockAccount(address, password, unlockDuration) {
    return __awaiter5(this, void 0, void 0, function* () {
      return unlockAccount(this.requestManager, address, password, unlockDuration);
    });
  }
  /**
   * Locks the given account
   * @param address - The address of the account to lock.
   * @returns - `true` if the account was locked, otherwise `false`.
   * @example
   * ```ts
   * await personal.lockAccount(
   * 	"0x0d4aa485ecbc499c70860feb7e5aaeaf5fd8172e"
   * );
   */
  lockAccount(address) {
    return __awaiter5(this, void 0, void 0, function* () {
      return lockAccount(this.requestManager, address);
    });
  }
  /**
   * Imports the given private key into the key store, encrypting it with the passphrase.
   * @param keyData - An unencrypted private key (hex string).
   * @param passphrase  - The password of the account
   * @returns - The address of the new account.
   * @example
   * ```ts
   * const accountAddress = await personal.importRawKey(
   * 	"abe40cb08850da918ee951b237fa87946499b2d8643e4aa12b0610b050c731f6",
   * 	"123456"
   * );
   *
   * console.log(unlockTx);
   * > 0x8727a8b34ec833154b72b62cac05d69f86eb6556
   * ```
   */
  importRawKey(keyData, passphrase) {
    return __awaiter5(this, void 0, void 0, function* () {
      return importRawKey(this.requestManager, keyData, passphrase);
    });
  }
  /**
   * This method sends a transaction over the management API.
   * **_NOTE:_** Sending your account password over an unsecured HTTP RPC connection is highly unsecure.
   * @param tx - The transaction options
   * @param passphrase - The passphrase of the current account
   * @returns - The transaction hash
   * @example
   * ```ts
   * const txHash = personal
   * .sendTransaction({
   *  	from: "0x0d4aa485ecbc499c70860feb7e5aaeaf5fd8172e",
   * 	gasPrice: "20000000000",
   * 	gas: "21000",
   * 	to: "0x3535353535353535353535353535353535353535",
   * 	value: "1000000",
   * 	data: "",
   * 	nonce: 0,
   * },
   * "123456");
   *
   * console.log(txHash);
   * > 0x9445325c3c5638c9fe425b003b8c32f03e9f99d409555a650a6838ba712bb51b
   * ```
   */
  sendTransaction(tx, passphrase) {
    return __awaiter5(this, void 0, void 0, function* () {
      return sendTransaction2(this.requestManager, tx, passphrase);
    });
  }
  /**
   * Signs a transaction. This account needs to be unlocked.
   * **_NOTE:_** Sending your account password over an unsecured HTTP RPC connection is highly unsecure.
   * @param tx - The transaction data to sign. See {@link sendTransaction}  for more information.
   * @param passphrase - The password of the `from` account, to sign the transaction with.
   * @returns - The RLP encoded transaction. The `raw` property can be used to send the transaction using {@link sendSignedTransaction}.
   * @example
   * ```ts
   * const tx = personal
   * .signTransaction({
   * 	from: "0x0d4aa485ecbc499c70860feb7e5aaeaf5fd8172e",
   * 	gasPrice: "20000000000",
   * 	gas: "21000",
   * 	to: "0x3535353535353535353535353535353535353535",
   * 	value: "1000000000000000000",
   * 	data: "",
   * 	nonce: 0,
   * },
   * "123456");
   *
   * console.log(tx);
   *
   * > {
   * 	raw: '0xf86e808504a817c800825208943535353535353535353535353535353535353535880de0b6b3a764000080820a95a0c951c03238fe930e6e69ab9d6af9f29248a514048e44884f0e60c4de40de3526a038b71399bf0c8925749ab79e91ce6cd2fc068c84c18ff6a197b48c4cbef01e00',
   * 	tx: {
   * 	type: '0x0',
   * 	nonce: '0x0',
   * 	gasPrice: '0x4a817c800',
   * 	maxPriorityFeePerGas: null,
   * 	maxFeePerGas: null,
   * 	gas: '0x5208',
   * 	value: '0xde0b6b3a7640000',
   * 	input: '0x',
   * 	v: '0xa95',
   * 	r: '0xc951c03238fe930e6e69ab9d6af9f29248a514048e44884f0e60c4de40de3526',
   * 	s: '0x38b71399bf0c8925749ab79e91ce6cd2fc068c84c18ff6a197b48c4cbef01e00',
   * 	to: '0x3535353535353535353535353535353535353535',
   * 	hash: '0x65e3df790ab2a32068b13cff970b26445b8995229ae4abbed61bd996f09fce69'
   * 	}
   * }
   * ```
   */
  signTransaction(tx, passphrase) {
    return __awaiter5(this, void 0, void 0, function* () {
      return signTransaction3(this.requestManager, tx, passphrase);
    });
  }
  /**
   * Calculates an Ethereum specific signature with:
   * sign(keccak256("\x19Ethereum Signed Message:\n" + dataToSign.length + dataToSign)))
   * Adding a prefix to the message makes the calculated signature recognisable as an Ethereum specific signature.
   *
   * If you have the original message and the signed message, you can discover the signing account address using web3.eth.personal.ecRecover
   * **_NOTE:_** Sending your account password over an unsecured HTTP RPC connection is highly unsecure.
   * @param data - The data to sign.
   * @param address - The address to sign with.
   * @param passphrase - The passphrase to decrypt the account with.
   * @returns - The signature.
   * @example
   * ```ts
   * const sig = await personal .sign("Hello world", "0x0D4Aa485ECbC499c70860fEb7e5AaeAf5fd8172E", "123456")
   * console.log(sig)
   * > 0x5d21d01b3198ac34d0585a9d76c4d1c8123e5e06746c8962318a1c08ffb207596e6fce4a6f377b7c0fc98c5f646cd73438c80e8a1a95cbec55a84c2889dca0301b
   * ```
   */
  sign(data, address, passphrase) {
    return __awaiter5(this, void 0, void 0, function* () {
      return sign3(this.requestManager, data, address, passphrase);
    });
  }
  /**
   * Recovers the account that signed the data.
   * @param signedData - Data that was signed. If String it will be converted using {@link utf8ToHex}
   * @param signature - The signature
   * @returns - The address of the account that signed the data.
   * @example
   * ```ts
   *  const address = await personal.ecRecover(
   * 	"Hello world",
   * 	"0x5d21d01b3198ac34d0585a9d76c4d1c8123e5e06746c8962318a1c08ffb207596e6fce4a6f377b7c0fc98c5f646cd73438c80e8a1a95cbec55a84c2889dca0301b"
   * );
   * console.log(address);
   * > 0x0d4aa485ecbc499c70860feb7e5aaeaf5fd8172e
   * ```
   */
  ecRecover(signedData, signature) {
    return __awaiter5(this, void 0, void 0, function* () {
      return ecRecover(this.requestManager, signedData, signature);
    });
  }
};

// node_modules/web3-eth-personal/lib/esm/index.js
var esm_default2 = Personal;

// node_modules/web3/lib/esm/abi.js
var abi_default = {
  encodeEventSignature,
  encodeFunctionCall,
  encodeFunctionSignature,
  encodeParameter,
  encodeParameters,
  decodeParameter,
  decodeParameters,
  decodeLog
};

// node_modules/web3/lib/esm/accounts.js
var __awaiter6 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var initAccountsForContext = (context) => {
  const signTransactionWithContext = (transaction, privateKey) => __awaiter6(void 0, void 0, void 0, function* () {
    const tx = yield prepareTransactionForSigning(transaction, context);
    const privateKeyBytes = format({ format: "bytes" }, privateKey, ETH_DATA_FORMAT);
    return signTransaction(tx, privateKeyBytes);
  });
  const privateKeyToAccountWithContext = (privateKey) => {
    const account = privateKeyToAccount(privateKey);
    return Object.assign(Object.assign({}, account), { signTransaction: (transaction) => __awaiter6(void 0, void 0, void 0, function* () {
      return signTransactionWithContext(transaction, account.privateKey);
    }) });
  };
  const decryptWithContext = (keystore, password, options) => __awaiter6(void 0, void 0, void 0, function* () {
    var _a;
    const account = yield decrypt(keystore, password, (_a = options === null || options === void 0 ? void 0 : options.nonStrict) !== null && _a !== void 0 ? _a : true);
    return Object.assign(Object.assign({}, account), { signTransaction: (transaction) => __awaiter6(void 0, void 0, void 0, function* () {
      return signTransactionWithContext(transaction, account.privateKey);
    }) });
  });
  const createWithContext = () => {
    const account = create();
    return Object.assign(Object.assign({}, account), { signTransaction: (transaction) => __awaiter6(void 0, void 0, void 0, function* () {
      return signTransactionWithContext(transaction, account.privateKey);
    }) });
  };
  const wallet = new Wallet({
    create: createWithContext,
    privateKeyToAccount: privateKeyToAccountWithContext,
    decrypt: decryptWithContext
  });
  return {
    signTransaction: signTransactionWithContext,
    create: createWithContext,
    privateKeyToAccount: privateKeyToAccountWithContext,
    decrypt: decryptWithContext,
    recoverTransaction,
    hashMessage,
    sign,
    recover,
    encrypt,
    wallet,
    privateKeyToAddress,
    parseAndValidatePrivateKey,
    privateKeyToPublicKey
  };
};

// node_modules/web3/lib/esm/version.js
var Web3PkgInfo = { version: "4.5.0" };

// node_modules/web3/lib/esm/web3.js
var Web3 = class extends Web3Context {
  constructor(providerOrContext) {
    var _a;
    if (isNullish(providerOrContext) || typeof providerOrContext === "string" && providerOrContext.trim() === "" || typeof providerOrContext !== "string" && !isSupportedProvider(providerOrContext) && !providerOrContext.provider) {
      console.warn("NOTE: web3.js is running without provider. You need to pass a provider in order to interact with the network!");
    }
    let contextInitOptions = {};
    if (typeof providerOrContext === "string" || isSupportedProvider(providerOrContext)) {
      contextInitOptions.provider = providerOrContext;
    } else if (providerOrContext) {
      contextInitOptions = providerOrContext;
    } else {
      contextInitOptions = {};
    }
    contextInitOptions.registeredSubscriptions = Object.assign(Object.assign({}, registeredSubscriptions), (_a = contextInitOptions.registeredSubscriptions) !== null && _a !== void 0 ? _a : {});
    super(contextInitOptions);
    const accounts = initAccountsForContext(this);
    this._wallet = accounts.wallet;
    this._accountProvider = accounts;
    this.utils = esm_exports4;
    const self = this;
    class ContractBuilder extends esm_default {
      constructor(jsonInterface, addressOrOptionsOrContext, optionsOrContextOrReturnFormat, contextOrReturnFormat, returnFormat) {
        if (isContractInitOptions(addressOrOptionsOrContext) && isContractInitOptions(optionsOrContextOrReturnFormat)) {
          throw new InvalidMethodParamsError("Should not provide options at both 2nd and 3rd parameters");
        }
        let address;
        let options = {};
        let context;
        let dataFormat = DEFAULT_RETURN_FORMAT;
        if (!isNullish(addressOrOptionsOrContext) && typeof addressOrOptionsOrContext !== "object" && typeof addressOrOptionsOrContext !== "string") {
          throw new InvalidMethodParamsError();
        }
        if (typeof addressOrOptionsOrContext === "string") {
          address = addressOrOptionsOrContext;
        }
        if (isContractInitOptions(addressOrOptionsOrContext)) {
          options = addressOrOptionsOrContext;
        } else if (isContractInitOptions(optionsOrContextOrReturnFormat)) {
          options = optionsOrContextOrReturnFormat;
        } else {
          options = {};
        }
        if (addressOrOptionsOrContext instanceof Web3Context) {
          context = addressOrOptionsOrContext;
        } else if (optionsOrContextOrReturnFormat instanceof Web3Context) {
          context = optionsOrContextOrReturnFormat;
        } else if (contextOrReturnFormat instanceof Web3Context) {
          context = contextOrReturnFormat;
        } else {
          context = self.getContextObject();
        }
        if (returnFormat) {
          dataFormat = returnFormat;
        } else if (isDataFormat(optionsOrContextOrReturnFormat)) {
          dataFormat = optionsOrContextOrReturnFormat;
        } else if (isDataFormat(contextOrReturnFormat)) {
          dataFormat = contextOrReturnFormat;
        }
        super(jsonInterface, address, options, context, dataFormat);
        super.subscribeToContextEvents(self);
      }
    }
    const eth = self.use(Web3Eth);
    this.eth = Object.assign(eth, {
      // ENS module
      ens: self.use(ENS, registryAddresses.main),
      // Iban helpers
      Iban,
      net: self.use(Net),
      personal: self.use(Personal),
      // Contract helper and module
      Contract: ContractBuilder,
      // ABI Helpers
      abi: abi_default,
      // Accounts helper
      accounts
    });
  }
};
Web3.version = Web3PkgInfo.version;
Web3.utils = esm_exports4;
Web3.modules = {
  Web3Eth,
  Iban,
  Net,
  ENS,
  Personal
};
var web3_default = Web3;

// node_modules/web3/lib/esm/eth.exports.js
var eth_exports_exports = {};
__export(eth_exports_exports, {
  ALL_EVENTS: () => ALL_EVENTS,
  ALL_EVENTS_ABI: () => ALL_EVENTS_ABI,
  LogsSubscription: () => LogsSubscription,
  NUMBER_DATA_FORMAT: () => NUMBER_DATA_FORMAT,
  NewHeadsSubscription: () => NewHeadsSubscription,
  NewPendingTransactionsSubscription: () => NewPendingTransactionsSubscription,
  SignatureObjectSchema: () => SignatureObjectSchema,
  SyncingSubscription: () => SyncingSubscription,
  Web3Eth: () => Web3Eth,
  abi: () => esm_exports12,
  accessListItemSchema: () => accessListItemSchema,
  accessListResultSchema: () => accessListResultSchema,
  accessListSchema: () => accessListSchema,
  accountSchema: () => accountSchema,
  accounts: () => esm_exports7,
  blockHeaderSchema: () => blockHeaderSchema,
  blockSchema: () => blockSchema,
  call: () => call,
  chainSchema: () => chainSchema,
  contract: () => esm_exports13,
  createAccessList: () => createAccessList,
  customChainSchema: () => customChainSchema,
  decodeEventABI: () => decodeEventABI,
  detectTransactionType: () => detectTransactionType,
  ens: () => esm_exports14,
  estimateGas: () => estimateGas,
  feeHistorySchema: () => feeHistorySchema,
  formatTransaction: () => formatTransaction,
  getBalance: () => getBalance,
  getBlock: () => getBlock,
  getBlockNumber: () => getBlockNumber,
  getBlockTransactionCount: () => getBlockTransactionCount,
  getBlockUncleCount: () => getBlockUncleCount,
  getChainId: () => getChainId,
  getCode: () => getCode,
  getCoinbase: () => getCoinbase,
  getFeeHistory: () => getFeeHistory,
  getGasPrice: () => getGasPrice,
  getHashRate: () => getHashRate,
  getLogs: () => getLogs,
  getPendingTransactions: () => getPendingTransactions,
  getProof: () => getProof,
  getProtocolVersion: () => getProtocolVersion,
  getStorageAt: () => getStorageAt,
  getTransaction: () => getTransaction,
  getTransactionCount: () => getTransactionCount,
  getTransactionFromBlock: () => getTransactionFromBlock,
  getTransactionReceipt: () => getTransactionReceipt,
  getUncle: () => getUncle,
  hardforkSchema: () => hardforkSchema,
  iban: () => esm_exports8,
  isAccessList: () => isAccessList,
  isAccessListEntry: () => isAccessListEntry,
  isBaseTransaction: () => isBaseTransaction,
  isMining: () => isMining,
  isSyncing: () => isSyncing,
  isTransaction1559Unsigned: () => isTransaction1559Unsigned,
  isTransaction2930Unsigned: () => isTransaction2930Unsigned,
  isTransactionCall: () => isTransactionCall,
  isTransactionLegacyUnsigned: () => isTransactionLegacyUnsigned,
  isTransactionWithSender: () => isTransactionWithSender,
  logSchema: () => logSchema,
  personal: () => esm_exports15,
  prepareTransactionForSigning: () => prepareTransactionForSigning,
  registeredSubscriptions: () => registeredSubscriptions,
  sendSignedTransaction: () => sendSignedTransaction,
  sendTransaction: () => sendTransaction,
  sign: () => sign2,
  signTransaction: () => signTransaction2,
  signTypedData: () => signTypedData,
  storageProofSchema: () => storageProofSchema,
  syncSchema: () => syncSchema,
  transactionBuilder: () => transactionBuilder,
  transactionInfoSchema: () => transactionInfoSchema,
  transactionReceiptSchema: () => transactionReceiptSchema,
  transactionSchema: () => transactionSchema,
  validateBaseChain: () => validateBaseChain,
  validateChainInfo: () => validateChainInfo,
  validateCustomChainInfo: () => validateCustomChainInfo,
  validateFeeMarketGas: () => validateFeeMarketGas,
  validateGas: () => validateGas,
  validateHardfork: () => validateHardfork,
  validateLegacyGas: () => validateLegacyGas,
  validateTransactionCall: () => validateTransactionCall,
  validateTransactionForSigning: () => validateTransactionForSigning,
  validateTransactionWithSender: () => validateTransactionWithSender,
  withdrawalsSchema: () => withdrawalsSchema
});

// node_modules/web3/lib/esm/providers.exports.js
var providers_exports_exports = {};
__export(providers_exports_exports, {
  Eip1193Provider: () => Eip1193Provider,
  SocketProvider: () => SocketProvider,
  http: () => esm_exports5,
  ws: () => esm_exports6
});

// node_modules/web3/lib/esm/index.js
var esm_default3 = web3_default;
export {
  AbiError,
  BaseWeb3Error,
  BlockTags,
  ChainIdMismatchError,
  ChainMismatchError,
  CommonOrChainAndHardforkError,
  ConfigChainMismatchError,
  ConfigHardforkMismatchError,
  ConnectionCloseError,
  ConnectionError,
  ConnectionNotOpenError,
  ConnectionTimeoutError,
  Contract,
  ContractCodeNotStoredError,
  ContractEventDoesNotExistError,
  ContractExecutionError,
  ContractInstantiationError,
  ContractMissingABIError,
  ContractMissingDeployDataError,
  ContractNoAddressDefinedError,
  ContractNoFromAddressDefinedError,
  ContractOnceRequiresCallbackError,
  ContractReservedEventError,
  ContractTransactionDataAndInputError,
  DEFAULT_RETURN_FORMAT,
  EIP1193ProviderRpcError,
  ENSCheckInterfaceSupportError,
  ENSNetworkNotSyncedError,
  ENSUnsupportedNetworkError,
  ERR_ABI_ENCODING,
  ERR_CONN,
  ERR_CONN_CLOSE,
  ERR_CONN_INVALID,
  ERR_CONN_MAX_ATTEMPTS,
  ERR_CONN_NOT_OPEN,
  ERR_CONN_PENDING_REQUESTS,
  ERR_CONN_TIMEOUT,
  ERR_CONTRACT,
  ERR_CONTRACT_ABI_MISSING,
  ERR_CONTRACT_EVENT_NOT_EXISTS,
  ERR_CONTRACT_EXECUTION_REVERTED,
  ERR_CONTRACT_INSTANTIATION,
  ERR_CONTRACT_MISSING_ADDRESS,
  ERR_CONTRACT_MISSING_DEPLOY_DATA,
  ERR_CONTRACT_MISSING_FROM_ADDRESS,
  ERR_CONTRACT_REQUIRED_CALLBACK,
  ERR_CONTRACT_RESERVED_EVENT,
  ERR_CONTRACT_RESOLVER_MISSING,
  ERR_CONTRACT_TX_DATA_AND_INPUT,
  ERR_CORE_CHAIN_MISMATCH,
  ERR_CORE_HARDFORK_MISMATCH,
  ERR_ENS_CHECK_INTERFACE_SUPPORT,
  ERR_ENS_NETWORK_NOT_SYNCED,
  ERR_ENS_UNSUPPORTED_NETWORK,
  ERR_EXISTING_PLUGIN_NAMESPACE,
  ERR_FORMATTERS,
  ERR_INVALID_ADDRESS,
  ERR_INVALID_BLOCK,
  ERR_INVALID_BOOLEAN,
  ERR_INVALID_BYTES,
  ERR_INVALID_CLIENT,
  ERR_INVALID_HEX,
  ERR_INVALID_KEYSTORE,
  ERR_INVALID_LARGE_VALUE,
  ERR_INVALID_METHOD_PARAMS,
  ERR_INVALID_NIBBLE_WIDTH,
  ERR_INVALID_NUMBER,
  ERR_INVALID_PASSWORD,
  ERR_INVALID_PRIVATE_KEY,
  ERR_INVALID_PROVIDER,
  ERR_INVALID_RESPONSE,
  ERR_INVALID_SIGNATURE,
  ERR_INVALID_SIZE,
  ERR_INVALID_STRING,
  ERR_INVALID_TYPE,
  ERR_INVALID_TYPE_ABI,
  ERR_INVALID_UNIT,
  ERR_INVALID_UNSIGNED_INTEGER,
  ERR_IV_LENGTH,
  ERR_KEY_DERIVATION_FAIL,
  ERR_KEY_VERSION_UNSUPPORTED,
  ERR_METHOD_NOT_IMPLEMENTED,
  ERR_OPERATION_ABORT,
  ERR_OPERATION_TIMEOUT,
  ERR_PARAM,
  ERR_PBKDF2_ITERATIONS,
  ERR_PRIVATE_KEY_LENGTH,
  ERR_PROVIDER,
  ERR_RAW_TX_UNDEFINED,
  ERR_REQ_ALREADY_SENT,
  ERR_RESPONSE,
  ERR_RPC_INTERNAL_ERROR,
  ERR_RPC_INVALID_INPUT,
  ERR_RPC_INVALID_JSON,
  ERR_RPC_INVALID_METHOD,
  ERR_RPC_INVALID_PARAMS,
  ERR_RPC_INVALID_REQUEST,
  ERR_RPC_LIMIT_EXCEEDED,
  ERR_RPC_MISSING_RESOURCE,
  ERR_RPC_NOT_SUPPORTED,
  ERR_RPC_TRANSACTION_REJECTED,
  ERR_RPC_UNAVAILABLE_RESOURCE,
  ERR_RPC_UNSUPPORTED_METHOD,
  ERR_SCHEMA_FORMAT,
  ERR_SIGNATURE_FAILED,
  ERR_SUBSCRIPTION,
  ERR_TX,
  ERR_TX_BLOCK_TIMEOUT,
  ERR_TX_CHAIN_ID_MISMATCH,
  ERR_TX_CHAIN_MISMATCH,
  ERR_TX_CONTRACT_NOT_STORED,
  ERR_TX_DATA_AND_INPUT,
  ERR_TX_GAS_MISMATCH,
  ERR_TX_GAS_MISMATCH_INNER_ERROR,
  ERR_TX_HARDFORK_MISMATCH,
  ERR_TX_INVALID_CALL,
  ERR_TX_INVALID_CHAIN_INFO,
  ERR_TX_INVALID_FEE_MARKET_GAS,
  ERR_TX_INVALID_FEE_MARKET_GAS_PRICE,
  ERR_TX_INVALID_LEGACY_FEE_MARKET,
  ERR_TX_INVALID_LEGACY_GAS,
  ERR_TX_INVALID_NONCE_OR_CHAIN_ID,
  ERR_TX_INVALID_OBJECT,
  ERR_TX_INVALID_PROPERTIES_FOR_TYPE,
  ERR_TX_INVALID_RECEIVER,
  ERR_TX_INVALID_SENDER,
  ERR_TX_LOCAL_WALLET_NOT_AVAILABLE,
  ERR_TX_MISSING_CHAIN_INFO,
  ERR_TX_MISSING_CUSTOM_CHAIN,
  ERR_TX_MISSING_CUSTOM_CHAIN_ID,
  ERR_TX_MISSING_GAS,
  ERR_TX_MISSING_GAS_INNER_ERROR,
  ERR_TX_NOT_FOUND,
  ERR_TX_NO_CONTRACT_ADDRESS,
  ERR_TX_OUT_OF_GAS,
  ERR_TX_POLLING_TIMEOUT,
  ERR_TX_RECEIPT_MISSING_BLOCK_NUMBER,
  ERR_TX_RECEIPT_MISSING_OR_BLOCKHASH_NULL,
  ERR_TX_REVERT_INSTRUCTION,
  ERR_TX_REVERT_TRANSACTION,
  ERR_TX_REVERT_TRANSACTION_CUSTOM_ERROR,
  ERR_TX_REVERT_WITHOUT_REASON,
  ERR_TX_SEND_TIMEOUT,
  ERR_TX_SIGNING,
  ERR_TX_UNABLE_TO_POPULATE_NONCE,
  ERR_TX_UNSUPPORTED_EIP_1559,
  ERR_TX_UNSUPPORTED_TYPE,
  ERR_UNSUPPORTED_KDF,
  ERR_VALIDATION,
  ERR_WS_PROVIDER,
  ETH_DATA_FORMAT,
  Eip1559GasPriceError,
  Eip1559NotSupportedError,
  Eip838ExecutionError,
  ExistingPluginNamespaceError,
  FMT_BYTES,
  FMT_NUMBER,
  FormatterError,
  GENESIS_BLOCK_NUMBER,
  HardforkMismatchError,
  HardforksOrdered,
  HexProcessingError,
  HttpProvider,
  IVLengthError,
  Iban,
  InternalError,
  InvalidAddressError,
  InvalidBlockError,
  InvalidBooleanError,
  InvalidBytesError,
  InvalidClientError,
  InvalidConnectionError,
  InvalidGasOrGasPrice,
  InvalidInputError,
  InvalidKdfError,
  InvalidLargeValueError,
  InvalidMaxPriorityFeePerGasOrMaxFeePerGas,
  InvalidMethodParamsError,
  InvalidNonceOrChainIdError,
  InvalidNumberError,
  InvalidNumberOfParamsError,
  InvalidParamsError,
  InvalidPasswordError,
  InvalidPrivateKeyError,
  InvalidPropertiesForTransactionTypeError,
  InvalidProviderError,
  InvalidRequestError,
  InvalidResponseError,
  InvalidSignatureError,
  InvalidSizeError,
  InvalidStringError,
  InvalidTransactionCall,
  InvalidTransactionObjectError,
  InvalidTransactionWithReceiver,
  InvalidTransactionWithSender,
  InvalidTypeAbiInputError,
  InvalidTypeError,
  InvalidUnitError,
  InvalidUnsignedIntegerError,
  InvalidValueError,
  JSONRPC_ERR_CHAIN_DISCONNECTED,
  JSONRPC_ERR_DISCONNECTED,
  JSONRPC_ERR_REJECTED_REQUEST,
  JSONRPC_ERR_UNAUTHORIZED,
  JSONRPC_ERR_UNSUPPORTED_METHOD,
  KeyDerivationError,
  KeyStoreVersionError,
  LimitExceededError,
  LocalWalletNotAvailableError,
  MaxAttemptsReachedOnReconnectingError,
  MethodNotFoundError,
  MethodNotImplementedError,
  MethodNotSupported,
  MissingChainOrHardforkError,
  MissingCustomChainError,
  MissingCustomChainIdError,
  MissingGasError,
  MissingGasInnerError,
  Net,
  NibbleWidthError,
  NoContractAddressFoundError,
  OperationAbortError,
  OperationTimeoutError,
  PBKDF2IterationsError,
  ParseError,
  PendingRequestsOnReconnectingError,
  Personal,
  PrivateKeyLengthError,
  ProviderError,
  RequestAlreadySentError,
  ResolverMethodMissingError,
  ResourceUnavailableError,
  ResourcesNotFoundError,
  ResponseError,
  RevertInstructionError,
  RpcError,
  RpcErrorMessages,
  SchemaFormatError,
  SignatureError,
  SubscriptionError,
  TransactionBlockTimeoutError,
  TransactionDataAndInputError,
  TransactionError,
  TransactionGasMismatchError,
  TransactionGasMismatchInnerError,
  TransactionMissingReceiptOrBlockHashError,
  TransactionNotFound,
  TransactionOutOfGasError,
  TransactionPollingTimeoutError,
  TransactionReceiptMissingBlockNumberError,
  TransactionRejectedError,
  TransactionRevertInstructionError,
  TransactionRevertWithCustomError,
  TransactionRevertedWithoutReasonError,
  TransactionSendTimeoutError,
  TransactionSigningError,
  TypedArray,
  UnableToPopulateNonceError,
  UndefinedRawTransactionError,
  UnsupportedFeeMarketError,
  UnsupportedTransactionTypeError,
  VersionNotSupportedError,
  web3_default as Web3,
  Web3BaseProvider,
  Web3BaseWallet,
  Web3Context,
  Web3ContractError,
  Web3Eth,
  Web3EthPluginBase,
  Web3PluginBase,
  Web3Validator,
  Web3WSProviderError,
  WebSocketProvider,
  esm_exports9 as core,
  esm_default3 as default,
  esm_exports as errors,
  eth_exports_exports as eth,
  genericRpcErrorMessageTemplate,
  esm_exports11 as net,
  providers_exports_exports as providers,
  rpcErrorsMap,
  esm_exports10 as rpcMethods,
  esm_exports2 as types,
  esm_exports4 as utils,
  esm_exports3 as validator
};
//# sourceMappingURL=web3.js.map
